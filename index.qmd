---
title: "Data Manipulation Challenge"
subtitle: "A Mental Model for Method Chaining in Pandas"
format:
  html: default
execute:
  echo: true
  eval: true
---

# 🔗 Data Manipulation Challenge - A Mental Model for Method Chaining in Pandas

::: {.callout-important}
## 📊 Challenge Requirements In Section [Student Analysis Section](#student-analysis-section)
- Complete all discussion questions for the seven mental models (plus some extra requirements for higher grades)
:::

::: {.callout-important}
## 🎯 Note on Python Usage

**Recommended Workflow: Use Your Existing Virtual Environment**
If you completed the Tech Setup Challenge Part 2, you already have a virtual environment set up! Here's how to use it for this new challenge:

1. **Clone this new challenge repository** (see Getting Started section below)
2. **Open the cloned repository in Cursor**
3. **Set this project to use your existing Python interpreter:**
   - Press `Ctrl+Shift+P` → "Python: Select Interpreter"
   - Navigate to and choose the interpreter from your existing virtual environment (e.g., `your-previous-project/venv/Scripts/python.exe`)
4. **Activate the environment in your terminal:**
   - Open terminal in Cursor (`Ctrl + ``)
   - Navigate to your previous project folder where you have the `venv` folder
   - **💡 Pro tip:** You can quickly navigate by typing `cd` followed by dragging the folder from your file explorer into the terminal
   - Activate using the appropriate command for your system:
     - **Windows Command Prompt:** `venv\Scripts\activate`
     - **Windows PowerShell:** `.\venv\Scripts\Activate.ps1`
     - **Mac/Linux:** `source venv/bin/activate`
   - You should see `(venv)` at the beginning of your terminal prompt
5. **Install additional packages if needed:** `pip install pandas numpy matplotlib seaborn`

::: {.callout-warning}
## ⚠️ Cloud Storage Warning

**Avoid using Google Drive, OneDrive, or other cloud storage for Python projects!** These services can cause issues with:
- Package installations failing due to file locking
- Virtual environment corruption
- Slow performance during pip operations

**Best practice:** Keep your Python projects in a local folder like `C:\Users\YourName\Documents\` or `~/Documents/` instead of cloud-synced folders.
:::

**Alternative: Create a New Virtual Environment**
If you prefer a fresh environment, follow the Quarto documentation: [https://quarto.org/docs/projects/virtual-environments.html](https://quarto.org/docs/projects/virtual-environments.html). Be sure to follow the instructions to activate the environment, set it up as your default Python interpreter for the project, and install the necessary packages (e.g. pandas) for this challenge.  For installing the packages, you can use the `pip install -r requirements.txt` command since you already have the requirements.txt file in your project.   Some steps do take a bit of time, so be patient.

**Why This Works:** Virtual environments are portable - you can use the same environment across multiple projects, and Cursor automatically activates it when you select the interpreter!

:::

## The Problem: Mastering Data Manipulation Through Method Chaining

**Core Question:** How can we efficiently manipulate datasets using `pandas` method chaining to answer complex business questions?

**The Challenge:** Real-world data analysis requires combining multiple data manipulation techniques in sequence. Rather than creating intermediate variables at each step, method chaining allows us to write clean, readable code that flows logically from one operation to the next.

**Our Approach:** We'll work with ZappTech's shipment data to answer critical business questions about service levels and cross-category orders, using the seven mental models of data manipulation through pandas method chaining.

::: {.callout-warning}
## ⚠️ AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance → Awareness → Learning → Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Seven Mental Models of Data Manipulation

The seven most important ways we manipulate datasets are:

1. **Assign:** Add new variables with calculations and transformations
2. **Subset:** Filter data based on conditions or select specific columns
3. **Drop:** Remove unwanted variables or observations
4. **Sort:** Arrange data by values or indices
5. **Aggregate:** Summarize data using functions like mean, sum, count
6. **Merge:** Combine information from multiple datasets
7. **Split-Apply-Combine:** Group data and apply functions within groups


## Data and Business Context

We analyze ZappTech's shipment data, which contains information about product deliveries across multiple categories. This dataset is ideal for our analysis because:

- **Real Business Questions:** CEO wants to understand service levels and cross-category shopping patterns
- **Multiple Data Sources:** Requires merging shipment data with product category information
- **Complex Relationships:** Service levels may vary by product category, and customers may order across categories
- **Method Chaining Practice:** Perfect for demonstrating all seven mental models in sequence

## Data Loading and Initial Exploration

Let's start by loading the ZappTech shipment data and understanding what we're working with.

```{python}
#| label: load-data
#| echo: true
#| message: false
#| warning: false

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta

# Load the shipment data
shipments_df = pd.read_csv(
    "https://raw.githubusercontent.com/flyaflya/persuasive/main/shipments.csv", 
    parse_dates=['plannedShipDate', 'actualShipDate']
)

# Load product line data
product_line_df = pd.read_csv(
    "https://raw.githubusercontent.com/flyaflya/persuasive/main/productLine.csv"
)

# Reduce dataset size for faster processing (4,000 rows instead of 96,805 rows)
shipments_df = shipments_df.head(4000)

print("Shipments data shape:", shipments_df.shape)
print("\nShipments data columns:", shipments_df.columns.tolist())
print("\nFirst few rows of shipments data:")
print(shipments_df.head(10))

print("\n" + "="*50)
print("Product line data shape:", product_line_df.shape)
print("\nProduct line data columns:", product_line_df.columns.tolist())
print("\nFirst few rows of product line data:")
print(product_line_df.head(10))
```

::: {.callout-note}
## 💡 Understanding the Data

**Shipments Data:** Contains individual line items for each shipment, including:
- `shipID`: Unique identifier for each shipment
- `partID`: Product identifier
- `plannedShipDate`: When the shipment was supposed to go out
- `actualShipDate`: When it actually shipped
- `quantity`: How many units were shipped

**Product Category and Line Data:** Contains product category information:
- `partID`: Links to shipments data
- `productLine`: The category each product belongs to
- `prodCategory`: The category each product belongs to

**Business Questions We'll Answer:**
1. Does service level (on-time shipments) vary across product categories?
2. How often do orders include products from more than one category?
:::

## The Seven Mental Models: A Progressive Learning Journey

Now we'll work through each of the seven mental models using method chaining, starting simple and building complexity.

### 1. Assign: Adding New Variables

**Mental Model:** Create new columns with calculations and transformations.

Let's start by calculating whether each shipment was late:

```{python}
#| label: mental-model-1-assign
#| echo: true

# Simple assignment - calculate if shipment was late
shipments_with_lateness = (
    shipments_df
    .assign(
        is_late=lambda df: df['actualShipDate'] > df['plannedShipDate'],
        days_late=lambda df: (df['actualShipDate'] - df['plannedShipDate']).dt.days
    )
)

print("Added lateness calculations:")
print(shipments_with_lateness[['shipID', 'plannedShipDate', 'actualShipDate', 'is_late', 'days_late']].head())
```

::: {.callout-tip}
## 💡 Method Chaining Tip for New Python Users

**Why use `lambda df:`?** When chaining methods, we need to reference the current state of the dataframe. The `lambda df:` tells pandas "use the current dataframe in this calculation." Without it, pandas would look for a variable called `df` that doesn't exist.

**Alternative approach:** You could also write this as separate steps, but method chaining keeps related operations together and makes the code more readable.
:::

::: {.callout-important}
## 🤔 Discussion Questions: Assign Mental Model

**Question 1: Data Types and Date Handling**
- What is the `dtype` of the `actualShipDate` series? How can you find out using code?
- Why is it important that both `actualShipDate` and `plannedShipDate` have the same data type for comparison?

**Question 2: String vs Date Comparison**
- Can you give an example where comparing two dates as strings would yield unintuitive results, e.g. what happens if you try to compare "04-11-2025" and "05-20-2024" as strings vs as dates?

**Question 3: Debug This Code**
```python
# This code has an error - can you spot it?
shipments_with_lateness = (
    shipments_df
    .assign(
        is_late=lambda df: df['actualShipDate'] > df['plannedShipDate'],
        days_late=lambda df: (df['actualShipDate'] - df['plannedShipDate']).dt.days,
        lateStatement="Darn Shipment is Late" if shipments_df['is_late'] else "Shipment is on Time"
    )
)
```
What's wrong with the `lateStatement` assignment and how would you fix it?
:::

#### Briefly Give Answers to the Discussion Questions In This Section

**Question 1: Data Types and Date Handling**

```python
# Check data types of date columns
date_types = (
    shipments_df
    .dtypes
    .to_frame('dtype')
    .query('index in ["plannedShipDate", "actualShipDate"]')
)
print(date_types)
```

Both columns are datetime64[ns] because they were parsed as dates during CSV loading. This enables date arithmetic and comparisons.

**Question 2: String vs Date Comparison**

String comparison uses lexicographic ordering: "04-11-2025" > "05-20-2024" = False (because "04" < "05"). Date comparison: April 11, 2025 > May 20, 2024 = True (because 2025 > 2024).

**Question 3: Debug This Code**

The error is referencing `shipments_df['is_late']` instead of the current dataframe. Fix:

```python
shipments_with_lateness = (
    shipments_df
    .assign(
        is_late=lambda df: df['actualShipDate'] > df['plannedShipDate'],
        days_late=lambda df: (df['actualShipDate'] - df['plannedShipDate']).dt.days,
        lateStatement=lambda df: df['is_late'].map({True: "Darn Shipment is Late", False: "Shipment is on Time"})
    )
)
```

Use `lambda df:` to reference the current dataframe and `.map()` for conditional assignment.

### 2. Subset: Querying Rows and Filtering Columns

**Mental Model:** Query rows based on conditions and filter to keep specific columns.

Let's query for only late shipments and filter to keep the columns we need:

```{python}
#| label: mental-model-2-subset
#| echo: true

# Query rows for late shipments and filter to keep specific columns
late_shipments = (
    shipments_with_lateness
    .query('is_late == True')  # Query rows where is_late is True
    .filter(['shipID', 'partID', 'plannedShipDate', 'actualShipDate', 'days_late'])  # Filter to keep specific columns
)

print(f"Found {len(late_shipments)} late shipments out of {len(shipments_with_lateness)} total")
print("\nLate shipments sample:")
print(late_shipments.head())
```

::: {.callout-note}
## 🔍 Understanding the Methods

- **`.query()`**: Query rows based on conditions (like SQL WHERE clause)
- **`.filter()`**: Filter to keep specific columns by name
- **Alternative**: You could use `.loc[]` for more complex row querying, but `.query()` is often more readable
:::

::: {.callout-important}
## 🤔 Discussion Questions: Subset Mental Model

**Question 1: Query vs Boolean Indexing**
- What's the difference between using `.query('is_late == True')` and `[df['is_late'] == True]`?
- Which approach is more readable and why?

**Question 2: Additional Row Querying**
- Can you show an example of using a variable like `late_threshold` to query rows for shipments that are at least `late_threshold` days late, e.g. what if you wanted to query rows for shipments that are at least 5 days late?
:::

#### Briefly Give Answers to the Discussion Questions In This Section

**Question 1: Query vs Boolean Indexing**

```python
# .query() method
late_shipments_query = (
    shipments_with_lateness
    .query('is_late == True')
)

# Boolean indexing
late_shipments_boolean = (
    shipments_with_lateness[shipments_with_lateness['is_late'] == True]
)
```

`.query()` is more readable - uses SQL-like syntax, handles complex conditions better, and automatically quotes column names.

**Question 2: Additional Row Querying**

```python
late_threshold = 5
very_late_shipments = (
    shipments_with_lateness
    .query(f'days_late >= {late_threshold}')
    .filter(['shipID', 'partID', 'days_late', 'is_late'])
)
```

Variables in queries enable flexible analysis with easily adjustable thresholds.

### 3. Drop: Removing Unwanted Data

**Mental Model:** Remove columns or rows you don't need.

Let's clean up our data by removing unnecessary columns:

```{python}
#| label: mental-model-3-drop
#| echo: true

# Create a cleaner dataset by dropping unnecessary columns
clean_shipments = (
    shipments_with_lateness
    .drop(columns=['quantity'])  # Drop quantity column (not needed for our analysis)
    .dropna(subset=['plannedShipDate', 'actualShipDate'])  # Remove rows with missing dates
)

print(f"Cleaned dataset: {len(clean_shipments)} rows, {len(clean_shipments.columns)} columns")
print("Remaining columns:", clean_shipments.columns.tolist())
```

::: {.callout-important}
## 🤔 Discussion Questions: Drop Mental Model

**Question 1: Drop vs Filter Strategies**
- What's the difference between `.drop(columns=['quantity'])` and `.filter()` with a list of columns you want to keep?
- When would you choose to drop columns vs filter to keep specific columns?

**Question 2: Handling Missing Data**
- What happens if you use `.dropna()` without specifying `subset`? How is this different from `.dropna(subset=['plannedShipDate', 'actualShipDate'])`?
- Why might you want to be selective about which columns to check for missing values?

:::

#### Briefly Give Answers to the Discussion Questions In This Section

**Question 1: Drop vs Filter Strategies**

```python
# Drop - remove specific columns
clean_drop = (
    shipments_with_lateness
    .drop(columns=['quantity'])
)

# Filter - keep specific columns
clean_filter = (
    shipments_with_lateness
    .filter(['shipID', 'partID', 'plannedShipDate', 'actualShipDate', 'is_late', 'days_late'])
)
```

Use `.drop()` when removing few columns, `.filter()` when keeping few columns.

**Question 2: Handling Missing Data**

```python
# Remove any row with any missing value
strict_clean = shipments_with_lateness.dropna()

# Remove only rows missing in specific columns
selective_clean = (
    shipments_with_lateness
    .dropna(subset=['plannedShipDate', 'actualShipDate'])
)
```

Selective `dropna()` preserves more data and focuses on columns relevant to your analysis.

### 4. Sort: Arranging Data

**Mental Model:** Order data by values or indices.

Let's sort by lateness to see the worst offenders:

```{python}
#| label: mental-model-4-sort
#| echo: true

# Sort by days late (worst first)
sorted_by_lateness = (
    clean_shipments
    .sort_values('days_late', ascending=False)  # Sort by days_late, highest first
    .reset_index(drop=True)  # Reset index to be sequential
)

print("Shipments sorted by lateness (worst first):")
print(sorted_by_lateness[['shipID', 'partID', 'days_late', 'is_late']].head(10))
```

::: {.callout-important}
## 🤔 Discussion Questions: Sort Mental Model

**Question 1: Sorting Strategies**
- What's the difference between `ascending=False` and `ascending=True` in sorting?
- How would you sort by multiple columns (e.g., first by `is_late`, then by `days_late`)?

**Question 2: Index Management**
- Why do we use `.reset_index(drop=True)` after sorting?
- What happens to the original index when you sort? Why might this be problematic?

:::

#### Briefly Give Answers to the Discussion Questions In This Section

**Question 1: Sorting Strategies**

```python
# Ascending (smallest first)
ascending_sort = clean_shipments.sort_values('days_late', ascending=True)

# Descending (largest first)  
descending_sort = clean_shipments.sort_values('days_late', ascending=False)

# Multi-column sorting
multi_sort = (
    clean_shipments
    .sort_values(['is_late', 'days_late'], ascending=[True, False])
    .reset_index(drop=True)
)
```

`ascending=True` sorts smallest to largest, `ascending=False` sorts largest to smallest. Multi-column sorting uses a list of columns and corresponding boolean values.

**Question 2: Index Management**

```python
# Original index becomes scrambled after sorting
sorted_no_reset = clean_shipments.sort_values('days_late', ascending=False)

# Reset index for clean sequential numbering
sorted_with_reset = (
    clean_shipments
    .sort_values('days_late', ascending=False)
    .reset_index(drop=True)
)
```

Reset the index after sorting to get clean sequential numbering (0, 1, 2...) instead of scrambled original indices.

### 5. Aggregate: Summarizing Data

**Mental Model:** Calculate summary statistics across groups or the entire dataset.

Let's calculate overall service level metrics:

```{python}
#| label: mental-model-5-aggregate
#| echo: true

# Calculate overall service level metrics
service_metrics = (
    clean_shipments
    .agg({
        'is_late': ['count', 'sum', 'mean'],  # Count total, count late, calculate percentage
        'days_late': ['mean', 'max']  # Average and maximum days late
    })
    .round(3)
)

print("Overall Service Level Metrics:")
print(service_metrics)

# Calculate percentage on-time directly from the data
on_time_rate = (1 - clean_shipments['is_late'].mean()) * 100
print(f"\nOn-time delivery rate: {on_time_rate:.1f}%")
```

::: {.callout-important}
## 🤔 Discussion Questions: Aggregate Mental Model

**Question 1: Boolean Aggregation**
- Why does `sum()` work on boolean values? What does it count?

:::

#### Briefly Give Answers to the Discussion Questions In This Section

**Question 1: Boolean Aggregation**

```python
# Boolean values convert to numbers: True=1, False=0
boolean_demo = (
    clean_shipments
    .assign(
        total_shipments=lambda df: len(df),
        late_shipments=lambda df: df['is_late'].sum(),
        late_percentage=lambda df: df['is_late'].mean() * 100
    )
    .agg({
        'total_shipments': 'first',
        'late_shipments': 'first', 
        'late_percentage': 'first'
    })
)
```

`sum()` on booleans counts True values (True=1, False=0). `mean()` gives the proportion of True values. `df['is_late'].sum()` equals `(df['is_late'] == True).sum()`.

### 6. Merge: Combining Information

**Mental Model:** Join data from multiple sources to create richer datasets.

Now let's analyze service levels by product category. First, we need to merge our data:

```{python}
#| label: mental-model-6-merge-prep
#| echo: true

# Merge shipment data with product line data
shipments_with_category = (
    clean_shipments
    .merge(product_line_df, on='partID', how='left')  # Left join to keep all shipments
    .assign(
        category_late=lambda df: df['is_late'] & df['prodCategory'].notna()  # Only count as late if we have category info
    )
)

print("\nProduct categories available:")
print(shipments_with_category['prodCategory'].value_counts())
```

::: {.callout-important}
## 🤔 Discussion Questions: Merge Mental Model

**Question 1: Join Types and Data Loss**
- Why does your professor think we should use `how='left'` in most cases? 
- How can you check if any shipments were lost during the merge?

**Question 2: Key Column Matching**
- What happens if there are duplicate `partID` values in the `product_line_df`?

:::

#### Briefly Give Answers to the Discussion Questions In This Section

**Question 1: Join Types and Data Loss**

```python
# Left join preserves all shipments
left_join = clean_shipments.merge(product_line_df, on='partID', how='left')

# Inner join only keeps shipments with matching partIDs
inner_join = clean_shipments.merge(product_line_df, on='partID', how='inner')

print(f"Left join: {len(left_join)} rows")
print(f"Inner join: {len(inner_join)} rows")
print(f"Data lost: {len(clean_shipments) - len(inner_join)} shipments")
```

Left join preserves all data and identifies missing product info. Inner join loses shipments without matching product data.

**Question 2: Key Column Matching**

```python
# Check for duplicate partIDs
duplicate_check = (
    product_line_df
    .groupby('partID')
    .size()
    .reset_index(name='count')
    .query('count > 1')
)
```

Duplicates in the right dataframe cause data multiplication - one shipment becomes multiple rows, inflating counts and breaking aggregations.

### 7. Split-Apply-Combine: Group Analysis

**Mental Model:** Group data and apply functions within each group.

Now let's analyze service levels by category:

```{python}
#| label: mental-model-7-groupby
#| echo: true

# Analyze service levels by product category
service_by_category = (
    shipments_with_category
    .groupby('prodCategory')  # Split by product category
    .agg({
        'is_late': ['any', 'count', 'sum', 'mean'],  # Count, late count, percentage late
        'days_late': ['mean', 'max']  # Average and max days late
    })
    .round(3)
)

print("Service Level by Product Category:")
print(service_by_category)
```

::: {.callout-important}
## 🤔 Discussion Questions: Split-Apply-Combine Mental Model

**Question 1: GroupBy Mechanics**
- What does `.groupby('prodCategory')` actually do? How does it "split" the data?
- Why do we need to use `.agg()` after grouping? What happens if you don't?

**Question 2: Multi-Level Grouping**
- Explore grouping by `['shipID', 'prodCategory']`?  What question does this answer versus grouping by `'prodCategory'` alone?  (HINT: There may be many rows with identical shipID's due to a particular order having multiple partID's.)
:::

#### Briefly Give Answers to the Discussion Questions In This Section

**Question 1: GroupBy Mechanics**

```python
# .groupby() splits data into groups by unique values
categories = (
    shipments_with_category
    .groupby('prodCategory')
    .size()
    .reset_index(name='count')
)

# Without .agg() you get a GroupBy object (lazy evaluation)
grouped_data = shipments_with_category.groupby('prodCategory')
print(f"Type: {type(grouped_data)}")  # <class 'pandas.core.groupby.DataFrameGroupBy'>
```

`.groupby()` creates groups but doesn't compute until you call `.agg()`. The GroupBy object is lazy - it needs `.agg()` to return actual results.

**Question 2: Multi-Level Grouping**

```python
# Single-level: overall category performance
category_analysis = (
    shipments_with_category
    .groupby('prodCategory')
    .agg({'is_late': ['count', 'sum', 'mean']})
)

# Multi-level: shipment-level performance within categories
shipment_analysis = (
    shipments_with_category
    .groupby(['shipID', 'prodCategory'])
    .agg({'is_late': 'any', 'days_late': 'max'})
    .reset_index()
    .assign(
        categories_per_shipment=lambda df: df.groupby('shipID')['prodCategory'].transform('nunique')
    )
)
```

Single-level shows overall category performance. Multi-level reveals cross-category ordering patterns and shipment-specific issues.

## Answering A Business Question

**Mental Model:** Combine multiple data manipulation techniques to answer complex business questions.

Let's create a comprehensive analysis by combining shipment-level data with category information:

```{python}
#| label: mental-model-7-comprehensive
#| echo: true

# Create a comprehensive analysis dataset
comprehensive_analysis = (
    shipments_with_category
    .groupby(['shipID', 'prodCategory'])  # Group by shipment and category
    .agg({
        'is_late': 'any',  # True if any item in this shipment/category is late
        'days_late': 'max'  # Maximum days late for this shipment/category
    })
    .reset_index()
    .assign(
        has_multiple_categories=lambda df: df.groupby('shipID')['prodCategory'].transform('nunique') > 1
    )
)

print("Comprehensive analysis - shipments with multiple categories:")
multi_category_shipments = comprehensive_analysis[comprehensive_analysis['has_multiple_categories']]
print(f"Shipments with multiple categories: {multi_category_shipments['shipID'].nunique()}")
print(f"Total unique shipments: {comprehensive_analysis['shipID'].nunique()}")
print(f"Percentage with multiple categories: {multi_category_shipments['shipID'].nunique() / comprehensive_analysis['shipID'].nunique() * 100:.1f}%")
```

::: {.callout-important}
## 🤔 Discussion Questions: Answering A Business Question

**Question 1: Business Question Analysis**
- What business question does this comprehensive analysis answer?
- How does grouping by `['shipID', 'prodCategory']` differ from grouping by just `'prodCategory'`?
- What insights can ZappTech's management gain from knowing the percentage of multi-category shipments?
:::

#### Briefly Give Answers to the Discussion Questions In This Section

**Question 1: Business Question Analysis**

This analysis answers: **"How often do customers order products from multiple categories in a single shipment, and what are the service level implications?"**

```python
# Single-level: overall category performance
category_analysis = (
    shipments_with_category
    .groupby('prodCategory')
    .agg({'is_late': ['count', 'sum', 'mean']})
)

# Multi-level: shipment-level performance within categories
shipment_analysis = (
    shipments_with_category
    .groupby(['shipID', 'prodCategory'])
    .agg({'is_late': 'any', 'days_late': 'max'})
    .reset_index()
    .assign(
        categories_per_shipment=lambda df: df.groupby('shipID')['prodCategory'].transform('nunique')
    )
)

# Calculate multi-category metrics
multi_category_pct = (
    shipment_analysis
    .query('categories_per_shipment > 1')['shipID']
    .nunique() / shipment_analysis['shipID'].nunique() * 100
)
print(f"Multi-category shipments: {multi_category_pct:.1f}%")
```

Single-level grouping shows overall category performance. Multi-level grouping reveals cross-category ordering patterns and shipment-specific issues. This helps management understand supply chain complexity and optimize operations for multi-category orders.

## Student Analysis Section: Mastering Data Manipulation {#student-analysis-section}

**Your Task:** Demonstrate your mastery of the seven mental models through comprehensive discussion and analysis. The bulk of your grade comes from thoughtfully answering the discussion questions for each mental model. See below for more details.

### Core Challenge: Discussion Questions Analysis

**For each mental model, provide:**
- Clear, concise answers to all discussion questions
- Code examples where appropriate to support your explanations

::: {.callout-important}
## 📊 Discussion Questions Requirements

**Complete all discussion question sections:**
1. **Assign Mental Model:** Data types, date handling, and debugging
2. **Subset Mental Model:** Filtering strategies and complex queries
3. **Drop Mental Model:** Data cleaning and quality management
4. **Sort Mental Model:** Data organization and business logic
5. **Aggregate Mental Model:** Summary statistics and business metrics
6. **Merge Mental Model:** Data integration and quality control
7. **Split-Apply-Combine Mental Model:** Group analysis and advanced operations
8. **Answering A Business Question:** Combining multiple data manipulation techniques to answer a business question
:::

### Professional Visualizations (For 100% Grade)

**Your Task:** Create a professional visualization that supports your analysis and demonstrates your understanding of the data.

**Create visualizations showing:**
- Service level (on-time percentage) by product category

**Your visualizations should:**
- Use clear labels and professional formatting
- Support the insights from your discussion questions
- Be appropriate for a business audience
- Do not `echo` the code that creates the visualizations

```{python}
#| label: professional-visualization
#| echo: false
#| fig-width: 12
#| fig-height: 8

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Set professional styling
plt.style.use('default')
sns.set_palette("husl")

# Create comprehensive service level analysis
service_analysis = (
    shipments_with_category
    .groupby('prodCategory')
    .agg({
        'is_late': ['count', 'sum', 'mean'],
        'days_late': ['mean', 'max']
    })
    .round(3)
)

# Flatten column names for easier access
service_analysis.columns = ['total_shipments', 'late_shipments', 'late_rate', 'avg_days_late', 'max_days_late']
service_analysis = service_analysis.reset_index()

# Calculate on-time percentage
service_analysis['on_time_rate'] = (1 - service_analysis['late_rate']) * 100

# Create the visualization
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('ZappTech Service Level Analysis by Product Category', fontsize=16, fontweight='bold', y=0.98)

# 1. On-Time Delivery Rate by Category (Horizontal Bar Chart)
bars1 = ax1.barh(service_analysis['prodCategory'], service_analysis['on_time_rate'], 
                 color=plt.cm.viridis(service_analysis['on_time_rate']/100))
ax1.set_xlabel('On-Time Delivery Rate (%)', fontsize=12, fontweight='bold')
ax1.set_ylabel('Product Category', fontsize=12, fontweight='bold')
ax1.set_title('Service Level Performance by Category', fontsize=14, fontweight='bold')
ax1.grid(axis='x', alpha=0.3)

# Add value labels on bars
for i, (bar, rate) in enumerate(zip(bars1, service_analysis['on_time_rate'])):
    ax1.text(rate + 0.5, bar.get_y() + bar.get_height()/2, f'{rate:.1f}%', 
             va='center', fontweight='bold', fontsize=10)

# 2. Shipment Volume vs Service Level (Scatter Plot)
scatter = ax2.scatter(service_analysis['total_shipments'], service_analysis['on_time_rate'], 
                     s=service_analysis['avg_days_late']*50,  # Size by average days late
                     c=service_analysis['late_rate'], 
                     cmap='Reds', alpha=0.7, edgecolors='black', linewidth=1)
ax2.set_xlabel('Total Shipments', fontsize=12, fontweight='bold')
ax2.set_ylabel('On-Time Delivery Rate (%)', fontsize=12, fontweight='bold')
ax2.set_title('Volume vs Performance Analysis', fontsize=14, fontweight='bold')
ax2.grid(alpha=0.3)

# Add category labels
for i, category in enumerate(service_analysis['prodCategory']):
    ax2.annotate(category, (service_analysis['total_shipments'].iloc[i], 
                           service_analysis['on_time_rate'].iloc[i]),
                xytext=(5, 5), textcoords='offset points', fontsize=9, alpha=0.8)

# Add colorbar for late rate
cbar = plt.colorbar(scatter, ax=ax2)
cbar.set_label('Late Rate', fontsize=10, fontweight='bold')

# 3. Average Days Late by Category (Bar Chart)
bars3 = ax3.bar(service_analysis['prodCategory'], service_analysis['avg_days_late'], 
                color=plt.cm.Reds(service_analysis['avg_days_late']/service_analysis['avg_days_late'].max()))
ax3.set_xlabel('Product Category', fontsize=12, fontweight='bold')
ax3.set_ylabel('Average Days Late', fontsize=12, fontweight='bold')
ax3.set_title('Average Lateness by Category', fontsize=14, fontweight='bold')
ax3.tick_params(axis='x', rotation=45)
ax3.grid(axis='y', alpha=0.3)

# Add value labels
for bar, days in zip(bars3, service_analysis['avg_days_late']):
    ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, f'{days:.1f}', 
             ha='center', va='bottom', fontweight='bold', fontsize=10)

# 4. Service Level Distribution (Pie Chart)
# Create performance categories
service_analysis['performance_tier'] = pd.cut(service_analysis['on_time_rate'], 
                                             bins=[0, 80, 90, 95, 100], 
                                             labels=['Poor (<80%)', 'Fair (80-90%)', 'Good (90-95%)', 'Excellent (95%+)'])

tier_counts = service_analysis['performance_tier'].value_counts()
colors = ['#ff4444', '#ffaa44', '#44aa44', '#4444ff']

wedges, texts, autotexts = ax4.pie(tier_counts.values, labels=tier_counts.index, autopct='%1.1f%%', 
                                   colors=colors, startangle=90)
ax4.set_title('Performance Tier Distribution', fontsize=14, fontweight='bold')

# Improve text readability
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontweight('bold')
    autotext.set_fontsize(10)

# Adjust layout and add summary statistics
plt.tight_layout()
plt.subplots_adjust(top=0.93)

# Add summary text box
summary_text = f"""
Key Insights:
• Total Categories: {len(service_analysis)}
• Best Performer: {service_analysis.loc[service_analysis['on_time_rate'].idxmax(), 'prodCategory']} ({service_analysis['on_time_rate'].max():.1f}%)
• Worst Performer: {service_analysis.loc[service_analysis['on_time_rate'].idxmin(), 'prodCategory']} ({service_analysis['on_time_rate'].min():.1f}%)
• Average Service Level: {service_analysis['on_time_rate'].mean():.1f}%
• Total Shipments Analyzed: {service_analysis['total_shipments'].sum():,}
"""

fig.text(0.02, 0.02, summary_text, fontsize=10, bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8))

plt.show()

# Print detailed summary table
print("Detailed Service Level Analysis by Product Category:")
print("=" * 60)
summary_table = (
    service_analysis
    .sort_values('on_time_rate', ascending=False)
    .assign(
        performance_rank=lambda df: range(1, len(df) + 1),
        late_percentage=lambda df: df['late_rate'] * 100
    )
    [['performance_rank', 'prodCategory', 'total_shipments', 'on_time_rate', 'late_percentage', 'avg_days_late']]
    .round(2)
)
print(summary_table.to_string(index=False))
```

## Challenge Requirements 📋

**Your Primary Task:** Answer all discussion questions for the seven mental models with thoughtful, well-reasoned responses that demonstrate your understanding of data manipulation concepts.

**Key Requirements:**
- Complete discussion questions for each mental model
- Demonstrate clear understanding of pandas concepts and data manipulation techniques
- Write clear, business-focused analysis that explains your findings

## Getting Started: Repository Setup 🚀

::: {.callout-important}
## 📁 Getting Started

**Step 1:** Fork and clone this challenge repository
- Go to the course repository and find the "dataManipulationChallenge" folder
- Fork it to your GitHub account, or clone it directly
- Open the cloned repository in Cursor

**Step 2:** Set up your Python environment
- Follow the Python setup instructions above (use your existing venv from Tech Setup Challenge Part 2)
- Make sure your virtual environment is activated and the Python interpreter is set

**Step 3:** You're ready to start! The data loading code is already provided in this file.

**Note:** This challenge uses the same `index.qmd` file you're reading right now - you'll edit it to complete your analysis.
:::


### Getting Started Tips

::: {.callout-note}
## 🎯 Method Chaining Philosophy

> "Each operation should build naturally on the previous one"

*Think of method chaining like building with LEGO blocks - each piece connects to the next, creating something more complex and useful than the individual pieces.*
:::

::: {.callout-warning}
## 💾 Important: Save Your Work Frequently!

**Before you start:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**

- After completing each mental model section
- After adding your visualizations
- After completing your advanced method chain
- Before asking the AI for help with new code

**How to commit:**

1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::

## Grading Rubric 🎓

**75% Grade:** Complete discussion questions for at least 5 of the 7 mental models with clear, thoughtful responses.

**85% Grade:** Complete discussion questions for all 7 mental models with comprehensive, well-reasoned responses.

**95% Grade:** Complete all discussion questions plus the "Answering A Business Question" section.

**100% Grade:** Complete all discussion questions plus create a professional visualization showing service level by product category.

## Submission Checklist ✅

**Minimum Requirements (Required for Any Points):**

- [ ] Created repository named "dataManipulationChallenge" in your GitHub account
- [ ] Cloned repository locally using Cursor (or VS Code)
- [ ] Completed discussion questions for at least 5 of the 7 mental models
- [ ] Document rendered to HTML successfully
- [ ] HTML files uploaded to your repository
- [ ] GitHub Pages enabled and working
- [ ] Site accessible at `https://[your-username].github.io/dataManipulationChallenge/`

**75% Grade Requirements:**

- [ ] Complete discussion questions for at least 5 of the 7 mental models
- [ ] Clear, thoughtful responses that demonstrate understanding
- [ ] Code examples where appropriate to support explanations

**85% Grade Requirements:**

- [ ] Complete discussion questions for all 7 mental models
- [ ] Comprehensive, well-reasoned responses showing deep understanding
- [ ] Business context for why concepts matter
- [ ] Examples of real-world applications

**95% Grade Requirements:**

- [ ] Complete discussion questions for all 7 mental models
- [ ] Complete the "Answering A Business Question" discussion questions
- [ ] Comprehensive, well-reasoned responses showing deep understanding
- [ ] Business context for why concepts matter

**100% Grade Requirements:**

- [ ] All discussion questions completed with professional quality
- [ ] Professional visualization showing service level by product category
- [ ] Professional presentation style appropriate for business audience
- [ ] Clear, engaging narrative that tells a compelling story
- [ ] Practical insights that would help ZappTech's management

**Report Quality (Critical for Higher Grades):**

- [ ] Professional writing style (no AI-generated fluff)
- [ ] Concise analysis that gets to the point


